{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"\nautoDetectSlots()\n\nscreenActivate(nil)\n\nhtml = ([[<svg id=\"Layer_1\" data-name=\"Layer 1\" viewBox=\"0 0 1024 640\"><defs><style>.cls-1{fill:#fff;}.cls-2{fill:red;}</style></defs><rect class=\"cls-1\" width=\"1024\" height=\"640\"/><rect class=\"cls-2\" width=\"1024\" height=\"281\"/><path class=\"cls-1\" d=\"M164.05,122.19V50.61h36.87q10.25,0,15.67,1.76a16.65,16.65,0,0,1,8.74,6.52,19.78,19.78,0,0,1,3.32,11.59,19.14,19.14,0,0,1-9.53,17.29,26.73,26.73,0,0,1-7.76,2.83,22,22,0,0,1,5.75,2.64A22,22,0,0,1,220.65,97a28.24,28.24,0,0,1,3.1,4.45l10.71,20.74h-25l-11.83-21.87c-1.49-2.83-2.83-4.67-4-5.52a9.24,9.24,0,0,0-5.42-1.66h-1.95v29.05Zm22.22-42.57h9.32a33.44,33.44,0,0,0,5.86-1A5.81,5.81,0,0,0,205,76.39a7.26,7.26,0,0,0-.8-9.47Q202,65.06,196,65.06h-9.71Z\"/><path class=\"cls-1\" d=\"M241.49,50.61h59.28V65.89H263.66V77.27h34.42v14.6H263.66V106h38.18v16.21H241.49Z\"/><path class=\"cls-1\" d=\"M309.9,98.51,331,97.19a16,16,0,0,0,2.78,7.82q3.42,4.33,9.76,4.34,4.74,0,7.3-2.22a6.66,6.66,0,0,0,2.57-5.15,6.58,6.58,0,0,0-2.44-5q-2.44-2.2-11.33-4.15Q325,89.58,318.84,84.16a17.48,17.48,0,0,1-6.25-13.82,18.79,18.79,0,0,1,3.19-10.43,21.25,21.25,0,0,1,9.62-7.71q6.42-2.81,17.61-2.81,13.71,0,20.92,5.1t8.57,16.24L351.65,72c-.56-3.22-1.72-5.57-3.49-7a11.21,11.21,0,0,0-7.35-2.2q-3.85,0-5.81,1.64a5,5,0,0,0-2,4,4,4,0,0,0,1.62,3.07q1.56,1.43,7.42,2.64,14.51,3.12,20.77,6.32A21.84,21.84,0,0,1,372,88.31a20.13,20.13,0,0,1,2.85,10.59A22.72,22.72,0,0,1,371,111.6a23.81,23.81,0,0,1-10.64,8.81q-6.84,3-17.24,3-18.25,0-25.29-7A27.7,27.7,0,0,1,309.9,98.51Z\"/><path class=\"cls-1\" d=\"M381,50.61h67.23V68.29H425.62v53.9H403.5V68.29H381Z\"/><path class=\"cls-1\" d=\"M458.48,122.19V50.61h36.87q10.26,0,15.67,1.76a16.61,16.61,0,0,1,8.74,6.52,19.71,19.71,0,0,1,3.32,11.59,19.16,19.16,0,0,1-9.52,17.29,26.81,26.81,0,0,1-7.77,2.83,22.21,22.21,0,0,1,5.76,2.64A22.46,22.46,0,0,1,515.08,97a28.24,28.24,0,0,1,3.1,4.45l10.71,20.74h-25l-11.82-21.87c-1.5-2.83-2.83-4.67-4-5.52a9.24,9.24,0,0,0-5.42-1.66H480.7v29.05ZM480.7,79.62H490a33.58,33.58,0,0,0,5.86-1,5.84,5.84,0,0,0,3.59-2.25,7.25,7.25,0,0,0-.81-9.47c-1.46-1.24-4.22-1.86-8.25-1.86H480.7Z\"/><path class=\"cls-1\" d=\"M536.85,50.61H559v71.58H536.85Z\"/><path class=\"cls-1\" d=\"M622.55,92.9l19.38,5.86a35.76,35.76,0,0,1-6.15,13.62,26.72,26.72,0,0,1-10.43,8.25q-6.23,2.79-15.84,2.78-11.67,0-19.07-3.39t-12.77-11.93q-5.37-8.53-5.37-21.86,0-17.76,9.45-27.3t26.73-9.54q13.53,0,21.27,5.47t11.5,16.8L621.72,76a16.85,16.85,0,0,0-2.15-4.78A12.68,12.68,0,0,0,615,67.31,14,14,0,0,0,597.5,72q-3,4.49-3,14.09,0,11.91,3.61,16.32t10.16,4.41q6.35,0,9.59-3.56T622.55,92.9Z\"/><path class=\"cls-1\" d=\"M647.64,50.61h67.24V68.29H692.32v53.9H670.2V68.29H647.64Z\"/><path class=\"cls-1\" d=\"M724.84,50.61h59.28V65.89H747V77.27h34.42v14.6H747V106h38.18v16.21H724.84Z\"/><path class=\"cls-1\" d=\"M797.4,50.61h32.86q9.72,0,15.7,2.64a25.56,25.56,0,0,1,9.89,7.57,31.3,31.3,0,0,1,5.66,11.47,53.35,53.35,0,0,1,1.76,13.87q0,11.48-2.61,17.8a29.51,29.51,0,0,1-7.25,10.59,23.69,23.69,0,0,1-10,5.69,51.48,51.48,0,0,1-13.19,2H797.4Zm22.12,16.21v39.11h5.42q6.93,0,9.86-1.53A10.39,10.39,0,0,0,839.39,99q1.67-3.83,1.66-12.42,0-11.38-3.71-15.58T825,66.82Z\"/><path class=\"cls-1\" d=\"M410.55,230.38H385.44L382,242.19H359.36l26.91-71.58h24.12l26.9,71.58H414.13ZM406,214.9l-7.9-25.73-7.82,25.73Z\"/><path class=\"cls-1\" d=\"M444.62,242.19V170.61h36.86q10.26,0,15.68,1.76a16.69,16.69,0,0,1,8.74,6.52,20.21,20.21,0,0,1-6.21,28.88,26.81,26.81,0,0,1-7.77,2.83,21.89,21.89,0,0,1,5.76,2.64,22.82,22.82,0,0,1,3.54,3.76,29,29,0,0,1,3.1,4.45L515,242.19H490l-11.82-21.87q-2.25-4.24-4-5.52a9.26,9.26,0,0,0-5.42-1.66h-2v29.05Zm22.21-42.57h9.33a33.58,33.58,0,0,0,5.86-1,5.84,5.84,0,0,0,3.59-2.25,7.25,7.25,0,0,0-.81-9.47q-2.19-1.86-8.25-1.86h-9.72Z\"/><path class=\"cls-1\" d=\"M522.06,170.61h59.28v15.28H544.23v11.38h34.42v14.6H544.23V226h38.18v16.21H522.06Z\"/><path class=\"cls-1\" d=\"M638.33,230.38H613.22l-3.49,11.81H587.15l26.9-71.58h24.13l26.9,71.58H641.91Zm-4.59-15.48-7.9-25.73L618,214.9Z\"/><path d=\"M77.59,318.57H94.11l21.56,31.68V318.57h16.68v57.27H115.67L94.23,344.4v31.44H77.59Z\"/><path d=\"M141.88,347.25q0-14,7.82-21.84t21.75-7.81q14.3,0,22,7.67t7.74,21.51q0,10-3.38,16.46a24,24,0,0,1-9.77,10q-6.37,3.57-15.91,3.58-9.69,0-16-3.09A24.13,24.13,0,0,1,145.83,364Q141.89,357.29,141.88,347.25Zm17.7.07q0,8.67,3.22,12.46a10.9,10.9,0,0,0,8.77,3.79q5.7,0,8.83-3.71t3.12-13.32q0-8.09-3.26-11.81a11.13,11.13,0,0,0-8.85-3.73,10.76,10.76,0,0,0-8.59,3.78Q159.58,338.58,159.58,347.32Z\"/><path d=\"M274.7,318.57h17.65v34.12a28.82,28.82,0,0,1-1.58,9.58,20.77,20.77,0,0,1-5,7.89,19.8,19.8,0,0,1-7.09,4.74,35.58,35.58,0,0,1-12.38,1.92,78.23,78.23,0,0,1-9.13-.59,23.88,23.88,0,0,1-8.26-2.32,20.74,20.74,0,0,1-6.07-4.94,18.05,18.05,0,0,1-3.77-6.6,34.3,34.3,0,0,1-1.64-9.68V318.57h17.66V353.5a10,10,0,0,0,2.59,7.32,11.18,11.18,0,0,0,14.38,0q2.59-2.6,2.6-7.36Z\"/><path d=\"M304.19,318.57h16.52l21.56,31.68V318.57H359v57.27H342.27L320.83,344.4v31.44H304.19Z\"/><path d=\"M405.14,366.39H385.05l-2.8,9.45H364.19l21.52-57.27H405l21.52,57.27H408ZM401.47,354l-6.33-20.58L388.89,354Z\"/><path d=\"M466.69,318.57h17.65v34.12a28.57,28.57,0,0,1-1.58,9.58,20.65,20.65,0,0,1-5,7.89,19.8,19.8,0,0,1-7.09,4.74,35.54,35.54,0,0,1-12.38,1.92,77.93,77.93,0,0,1-9.12-.59,23.75,23.75,0,0,1-8.26-2.32,20.78,20.78,0,0,1-6.08-4.94,18.2,18.2,0,0,1-3.77-6.6,34.3,34.3,0,0,1-1.64-9.68V318.57h17.66V353.5a10,10,0,0,0,2.59,7.32,11.18,11.18,0,0,0,14.38,0q2.6-2.6,2.6-7.36Z\"/><path d=\"M492,318.57h53.79v14.14H527.78v43.13H510.09V332.71H492Z\"/><path d=\"M553.91,318.57h17.7v20H591v-20h17.77v57.27H591V352.67H571.61v23.17h-17.7Z\"/><path d=\"M618.25,347.25q0-14,7.81-21.84t21.76-7.81q14.29,0,22,7.67t7.74,21.51q0,10-3.38,16.46a24.08,24.08,0,0,1-9.77,10q-6.39,3.57-15.92,3.58-9.69,0-16-3.09A24.13,24.13,0,0,1,622.2,364Q618.24,357.29,618.25,347.25Zm17.7.07q0,8.67,3.22,12.46a10.9,10.9,0,0,0,8.77,3.79q5.7,0,8.83-3.71t3.12-13.32q0-8.09-3.26-11.81a11.16,11.16,0,0,0-8.85-3.73,10.75,10.75,0,0,0-8.59,3.78Q635.95,338.58,636,347.32Z\"/><path d=\"M687.35,375.84V318.57h29.49q8.2,0,12.54,1.41a13.46,13.46,0,0,1,7,5.21,16.18,16.18,0,0,1-5,23.11,21.45,21.45,0,0,1-6.21,2.27,17.31,17.31,0,0,1,4.6,2.11,17.56,17.56,0,0,1,2.83,3,22.32,22.32,0,0,1,2.48,3.56l8.57,16.59h-20l-9.46-17.5a13.35,13.35,0,0,0-3.21-4.42,7.43,7.43,0,0,0-4.33-1.32h-1.56v23.24Zm17.78-34.06h7.46a26.65,26.65,0,0,0,4.68-.78,4.69,4.69,0,0,0,2.87-1.8,5.79,5.79,0,0,0-.64-7.58q-1.75-1.49-6.6-1.48h-7.77Z\"/><path d=\"M750.05,318.57h17.73v57.27H750.05Z\"/><path d=\"M779,318.57h50.08V330L797,363.53h33.32v12.31H776V364l31.8-33.16H779Z\"/><path d=\"M838.21,318.57h47.42V330.8H856v9.1h27.53v11.68H856v11.29h30.54v13H838.21Z\"/><path d=\"M896.26,318.57h26.29q7.77,0,12.56,2.11a20.52,20.52,0,0,1,7.91,6.06,25.15,25.15,0,0,1,4.53,9.18A42.44,42.44,0,0,1,949,347q0,9.18-2.09,14.24a23.5,23.5,0,0,1-5.8,8.48,19,19,0,0,1-8,4.55,41.07,41.07,0,0,1-10.54,1.56H896.26Zm17.69,13v31.29h4.34q5.55,0,7.89-1.23a8.31,8.31,0,0,0,3.67-4.3q1.33-3.06,1.33-9.94,0-9.11-3-12.46t-9.84-3.36Z\"/><path d=\"M244.48,414.57h29.41q9.62,0,14.4,4.57t4.78,13q0,8.67-5.21,13.56t-15.92,4.88h-9.69v21.25H244.48ZM262.25,439h4.34q5.12,0,7.19-1.78a5.72,5.72,0,0,0,2.07-4.55,6.35,6.35,0,0,0-1.8-4.57q-1.8-1.87-6.76-1.88h-5Z\"/><path d=\"M302.29,414.57h47.42V426.8H320v9.1h27.54v11.68H320v11.29h30.54v13H302.29Z\"/><path d=\"M360.34,471.84V414.57h29.49q8.21,0,12.54,1.41a13.4,13.4,0,0,1,7,5.21,16.17,16.17,0,0,1-5,23.11,21.41,21.41,0,0,1-6.22,2.27,17.25,17.25,0,0,1,4.61,2.11,18,18,0,0,1,2.83,3,22.32,22.32,0,0,1,2.48,3.56l8.57,16.59h-20l-9.46-17.5a13.22,13.22,0,0,0-3.2-4.42,7.43,7.43,0,0,0-4.33-1.32h-1.57v23.24Zm17.77-34.06h7.46a26.71,26.71,0,0,0,4.69-.78,4.72,4.72,0,0,0,2.87-1.8,5.79,5.79,0,0,0-.64-7.58q-1.75-1.49-6.6-1.48h-7.78Z\"/><path d=\"M419.25,452.89l16.83-1.05a12.9,12.9,0,0,0,2.23,6.25,9.35,9.35,0,0,0,7.81,3.48,8.67,8.67,0,0,0,5.84-1.78,5.32,5.32,0,0,0,2.05-4.12,5.26,5.26,0,0,0-1.95-4q-1.95-1.76-9.06-3.32-11.64-2.61-16.61-6.95a14,14,0,0,1-5-11.06A15.08,15.08,0,0,1,424,422a17,17,0,0,1,7.7-6.17q5.13-2.23,14.08-2.24,11,0,16.74,4.08t6.85,13l-16.68,1a7.79,7.79,0,0,0-8.67-7.38,7.14,7.14,0,0,0-4.65,1.31,4,4,0,0,0-1.56,3.18,3.16,3.16,0,0,0,1.29,2.46q1.24,1.14,5.94,2.11,11.6,2.51,16.62,5.06a17.42,17.42,0,0,1,7.3,6.35,16,16,0,0,1,2.29,8.48,18.16,18.16,0,0,1-3.05,10.15,19.06,19.06,0,0,1-8.51,7.05,34.47,34.47,0,0,1-13.79,2.41q-14.61,0-20.24-5.63A22.17,22.17,0,0,1,419.25,452.89Z\"/><path d=\"M477.88,443.25q0-14,7.81-21.84t21.76-7.81q14.3,0,22,7.67t7.73,21.51q0,10-3.37,16.46a24.08,24.08,0,0,1-9.77,10q-6.39,3.57-15.92,3.58-9.69,0-16-3.09a24.1,24.1,0,0,1-10.3-9.77Q477.88,453.29,477.88,443.25Zm17.69.07q0,8.67,3.23,12.46a10.9,10.9,0,0,0,8.77,3.79q5.7,0,8.82-3.71t3.13-13.32q0-8.09-3.26-11.81a11.16,11.16,0,0,0-8.85-3.73,10.75,10.75,0,0,0-8.59,3.78Q495.56,434.58,495.57,443.32Z\"/><path d=\"M546.86,414.57h16.53L585,446.25V414.57h16.68v57.27H585L563.5,440.4v31.44H546.86Z\"/><path d=\"M613.5,414.57H630l21.56,31.68V414.57h16.68v57.27H651.59L630.14,440.4v31.44H613.5Z\"/><path d=\"M680,414.57h47.42V426.8H697.72v9.1h27.54v11.68H697.72v11.29h30.55v13H680Z\"/><path d=\"M737.8,414.57h17.7v43.17h27.61v14.1H737.8Z\"/><path d=\"M58.11,510.57H91.24q8.28,0,12.71,4.1a13.28,13.28,0,0,1,4.44,10.16,12.8,12.8,0,0,1-3.17,8.71,14,14,0,0,1-6.17,3.83q6.18,1.49,9.08,5.1a14,14,0,0,1,2.91,9.08,15.62,15.62,0,0,1-2.07,8,15.26,15.26,0,0,1-5.66,5.62,18.73,18.73,0,0,1-6.72,1.88,77.57,77.57,0,0,1-7.93.78H58.11ZM76,533h7.7q4.14,0,5.76-1.42A5.2,5.2,0,0,0,91,527.49a4.91,4.91,0,0,0-1.62-3.91q-1.62-1.41-5.64-1.41H76Zm0,22.5h9c3.05,0,5.19-.54,6.44-1.62a5.46,5.46,0,0,0,1.88-4.35,5,5,0,0,0-1.86-4.08q-1.85-1.54-6.5-1.55H76Z\"/><path d=\"M120.26,510.57h47.42V522.8H138v9.1h27.54v11.68H138v11.29h30.54v13H120.26Z\"/><path d=\"M172.29,510.57H192l11.54,19.32,11.56-19.32H234.6l-22.27,33.28v24H194.6v-24Z\"/><path d=\"M233.27,539.25q0-14,7.81-21.84t21.76-7.81q14.3,0,22,7.67t7.74,21.51q0,10-3.38,16.46a24.08,24.08,0,0,1-9.77,10q-6.39,3.57-15.92,3.58-9.69,0-16-3.09a24.15,24.15,0,0,1-10.3-9.77Q233.27,549.29,233.27,539.25Zm17.69.07q0,8.67,3.23,12.46a10.9,10.9,0,0,0,8.77,3.79q5.7,0,8.83-3.71t3.12-13.32q0-8.09-3.26-11.81A11.16,11.16,0,0,0,262.8,523a10.75,10.75,0,0,0-8.59,3.78Q251,530.57,251,539.32Z\"/><path d=\"M302.25,510.57h16.53l21.56,31.68V510.57H357v57.27H340.34L318.89,536.4v31.44H302.25Z\"/><path d=\"M369,510.57H395.3q7.77,0,12.56,2.11a20.44,20.44,0,0,1,7.91,6.06,25.15,25.15,0,0,1,4.53,9.18A42.44,42.44,0,0,1,421.71,539q0,9.18-2.09,14.24a23.75,23.75,0,0,1-5.8,8.48,19.1,19.1,0,0,1-8,4.55,41.14,41.14,0,0,1-10.55,1.56H369Zm17.7,13v31.29H391q5.55,0,7.89-1.23a8.33,8.33,0,0,0,3.68-4.3q1.32-3.06,1.32-9.94,0-9.11-3-12.46c-2-2.24-5.26-3.36-9.84-3.36Z\"/><path d=\"M453.66,510.57h53.79v14.14H489.4v43.13H471.71V524.71h-18Z\"/><path d=\"M515.54,510.57h17.69v20h19.34v-20h17.77v57.27H552.57V544.67H533.23v23.17H515.54Z\"/><path d=\"M582.8,510.57h17.74v57.27H582.8Z\"/><path d=\"M610.14,548.89l16.84-1a12.8,12.8,0,0,0,2.23,6.25,9.34,9.34,0,0,0,7.81,3.48,8.69,8.69,0,0,0,5.84-1.78,5.32,5.32,0,0,0,2-4.12,5.26,5.26,0,0,0-1.95-4q-2-1.75-9.07-3.32-11.64-2.61-16.6-7a14,14,0,0,1-5-11.06,15.08,15.08,0,0,1,2.56-8.34,17,17,0,0,1,7.7-6.17q5.13-2.23,14.08-2.24,11,0,16.74,4.08t6.85,13l-16.68,1a7.79,7.79,0,0,0-8.67-7.38,7.1,7.1,0,0,0-4.65,1.31,4,4,0,0,0-1.56,3.18,3.16,3.16,0,0,0,1.29,2.46q1.24,1.14,5.94,2.11,11.6,2.5,16.62,5.06a17.48,17.48,0,0,1,7.3,6.35,16,16,0,0,1,2.29,8.48,18.16,18.16,0,0,1-3.05,10.15,19.06,19.06,0,0,1-8.51,7,34.47,34.47,0,0,1-13.79,2.41q-14.61,0-20.24-5.63A22.23,22.23,0,0,1,610.14,548.89Z\"/><path d=\"M697.61,510.57H727q9.62,0,14.39,4.57t4.79,13q0,8.67-5.22,13.56t-15.91,4.88h-9.69v21.25H697.61ZM715.38,535h4.33c3.42,0,5.81-.59,7.19-1.78a5.72,5.72,0,0,0,2.07-4.55,6.38,6.38,0,0,0-1.79-4.57c-1.2-1.25-3.46-1.88-6.76-1.88h-5Z\"/><path d=\"M753.23,539.25q0-14,7.81-21.84t21.76-7.81q14.3,0,22,7.67t7.74,21.51q0,10-3.38,16.46a24.08,24.08,0,0,1-9.77,10q-6.39,3.57-15.92,3.58-9.69,0-16-3.09A24.13,24.13,0,0,1,757.18,556Q753.22,549.29,753.23,539.25Zm17.7.07q0,8.67,3.22,12.46a10.9,10.9,0,0,0,8.77,3.79q5.7,0,8.83-3.71t3.12-13.32q0-8.09-3.26-11.81a11.15,11.15,0,0,0-8.85-3.73,10.75,10.75,0,0,0-8.59,3.78Q770.93,530.57,770.93,539.32Z\"/><path d=\"M822.8,510.57h17.74v57.27H822.8Z\"/><path d=\"M853.35,510.57h16.52l21.56,31.68V510.57h16.68v57.27H891.43L870,536.4v31.44H853.35Z\"/><path d=\"M915.85,510.57h53.79v14.14h-18v43.13H933.9V524.71h-18Z\"/></svg>]])\n-- Set the specified HTML on all attached screens (the index is 0)\nscreenSetHTML(nil, html)\n\n--svg = [[<svg viewBox=\"0 0 1024 640\" xmlns=\"http://www.w3.org/2000/svg\"><rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" stroke=\"#fff\" fill=\"#00f\"/></svg>]]\n-- Set the specified SVG on all attached screens (the index is 0)\n--screenSetSVG(0, svg)\n","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"screenDeactivate(0)\n","filter":{"args":[],"signature":"stop()","slotKey":"-1"},"key":"1"},{"code":"-- DUKit Version: 0.11.0\n\n--\n-- CONSOLE OUTPUT\n--\n\nQUIET=0     -- No console output\nERRORS=1    -- Only errors get output\nWARNINGS=2  -- Only errors and warnings get output\nDEBUG=3     -- Everything gets output\n\nCONSOLE_LOUDNESS=ERRORS  --export: Console output filter level (QUIET, ERRORS, WARNINGS, DEBUG)\n\n-- Send message to console.\n-- msg: text to put to console\n-- lvl: the message level (ERRORS, WARNINGS, DEBUG)\nfunction out(msg, lvl)\n    local level = lvl or DEBUG\n    if level > QUIET and level <= CONSOLE_LOUDNESS then\n        system.print(msg)\n    end\nend\n\n-- Send a debug level message to console.\n-- msg: text to put to console\nfunction debug(msg)\n    out(msg, DEBUG)\nend\n\n-- Send an error level message to console.\n-- msg: text to put to console\n-- ex: true=raise error and then exit, false=send to console\nfunction err(msg, ex)\n    out(msg, ERRORS)\n    local ex = ex or true\n    if ex then\n        error(msg)\n        unit.exit()\n    end\nend\n\n-- Send a warning level message to console.\n-- msg: text to put to console\nfunction warn(msg)\n    out(msg, WARNINGS)\nend\n\n-- Send a debug level message to console and then test condition.\n-- condition: condition to test for True\n-- errmsg: message output to console on False test condition\n-- dbgmsg: debug level text to put to console before test to identify where the test is\nfunction test(condition, errmsg, dbgmsg)\n    if not condition then\n        if dbgmsg then\n            debug(dbgmsg)\n        end\n        local errmsg = errmsg or \"ERROR: Tested conditon was false!\"\n        err(errmsg, True)\n    end\nend\n\n--\n-- UTILITIES\n--\n\n-- Get the name of the player that activated this unit.\n-- returns the player name as a string\nfunction getPlayerName()\n    local player_id = unit.getMasterPlayerId()\n    local player_name = system.getPlayerName(player_id)\n    return player_name\nend\n\n-- Round a number to the specified decimal place.\n-- n: number to round\n-- places: the decimal places to round to\n-- returns the rounded number\nfunction round(n, places)\n    local mult = 10 ^ (places or 0)\n    if places ~= nil then\n        return math.floor(n * mult + 0.5) / mult\n    else\n        return math.floor((n * mult + 0.5) / mult)\n    end\nend\n\n-- Convert the specified value to a number.\n-- n: the value to try and convert\n-- returns the integer value\n-- An error will be raised if the value cannot be converted.\nfunction toInt(n)\n    local t = n\n    if t and type(t) == \"string\" then\n        t = tonumber(t)\n    end\n    if t and type(t) == \"number\" then\n        local i = math.floor(t)\n        if i < t then\n            i = i + 1\n        end\n        return i\n    end\n    err(\"ERROR: Unable to convert value '\"..n..\"' to integer!\")\nend\n\n-- Convert the specified value to a number.\n-- n: the value to try and convert\n-- returns the integer value\n-- An error will be raised if the value cannot be converted.\nfunction toNum(n)\n    local t = n\n    if t and type(t) == \"string\" then\n        t = tonumber(t)\n    end\n    if t and type(t) == \"number\" then\n        return t\n    end\n    err(\"ERROR: Unable to convert value '\"..n..\"' to number!\")\nend\n\n-- Convert the specified value to a string.\n-- n: the value to convert\n-- returns the string value\n-- An error will be raised if the value cannot be converted.\nfunction toStr(n)\n    local t = n\n    if t and type(t) == \"number\" then\n        t = tostring(t)\n    end\n    if t and type(t) == \"string\" then\n        return t\n    end\n    if t == nil then\n        return \"nil\"\n    end\n    err(\"ERROR: Unable to convert value '\"..n..\"' to string!\")\nend\n\n-- Select and use an element.\n-- unit_table: the table of elements to select from\n-- unit_id: id of the unit in the table to use (nil/\"nil\" will iterate all units in table)\n-- unit_op: the function to call with the selected unit\n-- data: data to be passed to the unit_op function\nfunction use(unit_table, unit_id, unit_op, data)\n    if unit_id == nil or unit_id == \"nil\" then\n        for id, u in pairs(unit_table) do\n            unit_op(id, u, data)\n        end\n        return\n    end\n    unit_id = toStr(unit_id)\n    unit_op(unit_id, unit_table[unit_id], data)\nend\n\n--\n-- COLOR UTILITIES\n--\n-- Utility functions and values to support color calculations.\n--\n\nRGB_BLACK   = {  0,  0,  0}\nRGB_WHITE   = {255,255,255}\nRGB_RED     = {255,  0,  0}\nRGB_YELLOW  = {255,255,  0}\nRGB_GREEN   = {  0,255,  0}\nRGB_CYAN    = {  0,255,255}\nRGB_BLUE    = {  0,  0,255}\nRGB_MAGENTA = {255,  0,255}\n\n-- Normalize a radian value to be in the range -pi to pi.\n-- r: the radian value to normalize\n-- returns the normalized radians value\nfunction normalizeRadians(r)\n    while r < -math.pi do\n        r = r + (2 * math.pi)\n    end\n    while r > math.pi do\n        r = r - (2 * math.pi)\n    end\n    return r\nend\n\n-- Normalize an RGB list.\n-- rgb: a list of values (i.e. { r, g, b })\n-- returns the normalized RGB list\nfunction normalizeRGB(rgb)\n    local r = math.max(math.min(math.floor(rgb[1]), 255), 0)\n    local g = math.max(math.min(math.floor(rgb[2]), 255), 0)\n    local b = math.max(math.min(math.floor(rgb[3]), 255), 0)\n    return {r, g, b}\nend\n\n-- Calculate the azimuth between the two colors (0=red, 90=blue).\n-- This function implements support for the RGB Color Space (\"Color Cube\")\n-- s_rgb: source RGB value\n-- t_rgb: target RGB value\n-- to_radians: [optional] true=result in radians (default: false=result in degrees)\n-- returns the value for the azimuth between the two colors\nfunction calcColorAzimuth(s_rgb, t_rgb, to_radians)\n    function atan_br(rgb)\n        local r = rgb[1] / 255\n        local b = rgb[3] / 255\n        if r == 0 then\n            if b == 0 then\n                return 0\n            end\n            return math.asin(b)\n        end\n        return math.atan(b/r)\n    end\n    local s_rgb = normalizeRGB(s_rgb)\n    local t_rgb = normalizeRGB(t_rgb)\n    local to_radians = to_radians or false\n    local s = atan_br(s_rgb)\n    local t = atan_br(t_rgb)\n    s = normalizeRadians(s)\n    t = normalizeRadians(t)\n    local a = t - s\n    if not to_radians then\n        a = math.floor(math.deg(a))\n    end\n    return a\nend\n\n-- Calculate the elevation between the two colors (0=no green, 90=green).\n-- This function implements support for the RGB Color Space (\"Color Cube\")\n-- s_rgb: source RGB value\n-- t_rgb: target RGB value\n-- to_radians: [optional] true=result in radians (default: false=result in degrees)\n-- returns the value for the elevation between the two colors\nfunction calcColorElevation(s_rgb, t_rgb, to_radians)\n    local s_rgb = normalizeRGB(s_rgb)\n    local t_rgb = normalizeRGB(t_rgb)\n    local to_radians = to_radians or false\n    local s = math.asin(s_rgb[2] / 255)\n    local t = math.asin(t_rgb[2] / 255)\n    local e = t - s\n    e = normalizeRadians(e)\n    if not to_radians then\n        e = math.floor(math.deg(e))\n    end\n    return e\nend\n\n-- Calculate the distance between the two colors.\n-- This function implements support for the RGB Color Space (\"Color Cube\")\n-- The distance is typically calculated from the origin color (i.e. RGB_BLACK)\n-- s_rgb: source RGB value\n-- t_rgb: target RGB value\n-- returns the value for the distance between the two colors\nfunction calcColorDistance(s_rgb, t_rgb)\n    local s_rgb = normalizeRGB(s_rgb)\n    local t_rgb = normalizeRGB(t_rgb)\n    local dr = t_rgb[1] - s_rgb[1]\n    local dg = t_rgb[2] - s_rgb[2]\n    local db = t_rgb[3] - s_rgb[3]\n    local d = math.sqrt((dr * dr) + (dg * dg) + (db * db))\n    return d\nend\n\n-- Calculate an RGB value from the azimuth, elevation, and distance components.\n-- This function implements support for the RGB Color Space (\"Color Cube\")\n-- azim: the azimuth value (0=red, 90=blue)\n-- elev: the elevation value (0=no green, 90=full green)\n-- dist: the distance value (0=black, 442=full intensity)\n-- is_radians: true=azim and eliv are in radians (default false=degrees)\n-- returns the calculated RGB list\nfunction calcRGBFromAED(azim, elev, dist, is_radians)\n    test((azim>=0) and (azim<=90), \"Azimuth must be between 0 and 90!\")\n    test((elev>=0) and (elev<=90), \"Elevation must be between 0 and 90!\")\n    local is_radians = is_radians or false\n    local a = azim\n    local e = elev\n    if not is_radians then\n        a = math.rad(a)\n        e = math.rad(e)\n    end\n    local r = dist * math.cos(a) * math.cos(e)\n    local b = dist * math.sin(a) * math.cos(e)\n    local g = dist * math.sin(e)\n    if not r then\n        r = 0\n    end\n    if not g then\n        g = 0\n    end\n    if not b then\n        b = 0\n    end\n    local rgb = normalizeRGB({r, g, b})\n    return rgb\nend\n\n--\n-- TABLE UTILITIES\n--\n-- Utility functions to support a table of strings, numbers or objects.\n--\n\n-- Get the number of items in the specified table.\n-- tbl: the table to get item count for\n-- returns the number of items in table\nfunction tableCount(tbl)\n    local len = 0\n    for k, v in pairs(tbl) do\n        len = len + 1\n    end\n    return len\nend\n\n-- Append an item to the end of a table (list mode).\n-- tbl: the table to modify\n-- itm: the item to append\nfunction tableAppendItem(tbl, itm)\n    table.insert(tbl, itm)\nend\n\n-- Add/Replace an item in a table (map mode).\n-- tbl: the table to modify\n-- key: the key for the entry\n-- itm: the value for the entry\nfunction tableAddItem(tbl, key, itm)\n    tbl[key] = itm\nend\n\n-- Insert an item in a table (list mode).\n-- tbl: the table to modify\n-- idx: the index for the entry\n-- itm: the value for the entry\nfunction tableInsertItem(tbl, idx, itm)\n    table.insert(tbl, itm, idx)\nend\n\n-- Find the first item in a table that matches the specified value and return its key.\n-- tbl: the table to search\n-- itm: the falue of the entry to look for\n-- returns the index of the first occurrence of itm (nil=not found)\nfunction tableFindItemKey(tbl, itm)\n    for k, t in pairs(tbl) do\n        if t == itm then\n            return k\n        end\n    end\n    return nil\nend\n\n-- Remove the first occurrence of an item from a table.\n-- tbl: the table to search\n-- itm: the value of the entry to remove\nfunction tableRemoveItem(tbl, itm)\n    local key = tableFindItemKey(tbl, itm)\n    if key then\n        tableRemoveItemAt(tbl, key)\n    end\nend\n\n-- Remove the item with the specified key/index from a table.\n-- tbl: the table to modify\n-- key: the key/index of the entry to remove\nfunction tableRemoveItemAt(tbl, key)\n    table.remove(tbl, key)\nend\n\n-- Get the item with the specified key/index from a table.\n-- tbl: the table to use\n-- key: the key/index of the entry\n-- default: the value to return if the key/index is not found (default is nil)\n-- returns the entry at the key/index or the specified default value\nfunction tableItemAt(tbl, key, default)\n    local t = tbl[key]\n    if t == nil then\n        t = default\n    end\n    return t\nend\n\n-- Iterate a table and process each key, value pair with the provided function.\n-- tbl: the table to iterate\n-- func: the function to call with the key and value\nfunction tableIterate(tbl, func)\n    if tbl and func then\n        for k, v in pairs(tbl) do\n            func(k, v)\n        end\n    end\nend\n\n-- Show the contents of a table.\n-- This uses the debug output function.\n-- tbl: the table to display\n-- indent_str: the indent sting to use for indenting on the console\n-- NOTE: system.print() appears to strip spaces from the start and end of string being printed.\nfunction tableShow(tbl, indent_str)\n    indent_str = indent_str or \"__\"\n    local level = 0\n    local tables = {}\n    function printLine(s)\n        local t = \"\"\n        for i = 0, level, 1 do\n            t = t..indent_str\n        end\n        t = t..s\n        debug(t)\n    end\n    function walkTable(tbl, s)\n        local i = tableFindItemKey(tables, tbl)\n        local s = s or \"\"\n        local n = i or tableCount(tables) + 1\n        s = s..\"<table-\"..n..\">[\"..tableCount(tbl)..\"]\"..\"{\"\n        printLine(s)\n        level = level + 1\n        if not i then\n            tableAppendItem(tables, tbl)\n            local quote_key = (tableType(tbl) == \"map\")\n            for k, v in pairs(tbl) do\n                s = \"\"\n                if quote_key then\n                    s = s..\"\\\"\"..k..\"\\\":\"\n                else\n                    s = s..k..\":\"\n                end\n                if v then\n                    t = type(v)\n                    u = s..\"<\"..t..\">\"\n                    if t == \"table\" then\n                        walkTable(v, s)\n                    elseif t == \"number\" then\n                        printLine(u..v)\n                    elseif t == \"boolean\" then\n                        if v then\n                            printLine(u..\"true\")\n                        else\n                            printLine(u..\"false\")\n                        end\n                    elseif t == \"function\" then\n                        printLine(u..\"()\")\n                    else\n                        printLine(u..\"\\\"\"..v..\"\\\"\")\n                    end\n                else\n                    printLine(s..\"\\\"nil\\\"\")\n                end\n            end\n        end\n        level = level - 1\n        printLine(\"}\")\n    end\n    walkTable(tbl)\nend\n\n-- Get the type of a table (i.e. \"list\" or \"map\").\n-- tbl: the table to identify.\n-- returns the table type\nfunction tableType(tbl)\n    for k, _ in pairs(tbl) do\n        if not (type(k) == \"number\") then\n            return \"map\"\n        end\n    end\n    return \"list\"\nend\n\n-- Convert a table to a JSON string.\n-- tbl: the table to convert\n-- returns a JSON string representation of the table\nfunction tableToJsonString(tbl)\n    local jsn = json.encode(tbl)\n    return jsn\nend\n\n-- Convert a JSON string to a table.\n-- jsn: the JSON string to convert\n-- returns a table containing the values from the JSON string\nfunction jsonStringToTable(jsn)\n    local tbl = json.decode(jsn)\n    return tbl\nend\n\n--\n-- SLOT DETECTION\n--\n\n-- Auto detect the units that are plugged into the control unit slots.\nfunction autoDetectSlots()\n    local auto_slots = unit[\"auto_detect_slots\"]\n    if not auto_slots then\n        auto_slots = {}\n        unit[\"auto_detect_slots\"] = auto_slots\n        auto_slots[\"core\"] = {}\n        auto_slots[\"container\"] = {}\n        auto_slots[\"databank\"] = {}\n        auto_slots[\"door\"] = {}\n        auto_slots[\"industry\"] = {}\n        auto_slots[\"light\"] = {}\n        auto_slots[\"screen\"] = {}\n        auto_slots[\"sign\"] = {}\n        local slot_name, slot = nil, nil\n        for slot_name, slot in pairs(unit) do\n            if type(slot) == \"table\" and type(slot.export) == \"table\" and slot.getElementClass then\n                local element_class = slot.getElementClass():lower()\n                local id = toStr(slot.getId())\n                local json_data = slot.getData()\n                if element_class == \"coreunitstatic\" then\n                    if tableCount(auto_slots[\"core\"]) == 1 then\n                        error(\"ERROR: Only one static core supported at this time!\")\n                    end\n                    tableAddItem(auto_slots[\"core\"], id, slot)\n                    debug(\"Found static core (id:\"..id..\")\")\n                elseif element_class == \"databankunit\" then\n                    tableAddItem(auto_slots[\"databank\"], id, slot)\n                    debug(\"Found databank (id:\"..id..\")\")\n                elseif element_class == \"doorunit\" then\n                    tableAddItem(auto_slots[\"door\"], id, slot)\n                    debug(\"Found door (id:\"..id..\")\")\n                elseif element_class == \"industry1\" or element_class == \"industry2\" or element_class == \"industry3\" or element_class == \"industry4\" then\n                    tableAddItem(auto_slots[\"industry\"], id, slot)\n                    debug(\"Found industry (id:\"..id..\")\")\n                elseif element_class == \"itemcontainer\" then\n                    tableAddItem(auto_slots[\"container\"], id, slot)\n                    debug(\"Found container (id:\"..id..\")\")\n                elseif element_class == \"lightunit\" then\n                    tableAddItem(auto_slots[\"light\"], id, slot)\n                    debug(\"Found light (id:\"..id..\")\")\n                elseif element_class == \"screenunit\" then\n                    tableAddItem(auto_slots[\"screen\"], id, slot)\n                    debug(\"Found screen (id:\"..id..\")\")\n                elseif element_class == \"screensignunit\" then\n                    tableAddItem(auto_slots[\"sign\"], id, slot)\n                    debug(\"Found sign (id:\"..id..\")\")\n                else\n                    debug(\"slot class '\"..element_class..\"' of type '\"..type(slot)..\"' in \"..slot_name, INFO)\n                    debug(\"  slot ID = \"..id)\n                    debug(\"  slot data = \"..json_data)\n                end\n            end\n        end\n    end\nend\n\n--\n-- CONTAINER UNIT\n--\n\n-- Get the number of containers.\nfunction containerCount()\n    debug(\"Getting the count of containers\")\n    return tableCount(unit[\"auto_detect_slots\"][\"container\"])\nend\n\n-- Get the mass of the items in the container (in kg).\n-- id: the ID of the container\n-- Returns the mass of the contents\nfunction containerGetItemsMass(id)\n    id = toStr(id)\n    debug(\"Getting mass of items in container [\"..id..\"]\")\n    local m = unit[\"auto_detect_slots\"][\"container\"][id].getItemsMass()\n    debug(m)\n    return m\nend\n\n-- Get the volume of the items in the container (in L).\n-- id: the id of the container\n-- Returns the volume of the contents\nfunction containerGetItemsVolume(id)\n    id = toStr(id)\n    debug(\"Getting volume of items in container [\"..id..\"]\")\n    local v = unit[\"auto_detect_slots\"][\"container\"][id].getItemsVolume()\n    debug(v)\n    return v\nend\n\n-- Get the maximum volume the container can hold (in L).\n-- id: the id of the container\n-- Return the container maximum volume\nfunction containerGetMaxVolume(id)\n    id = toStr(id)\n    debug(\"Getting maximum volume of container [\"..id..\"]\")\n    local v = unit[\"auto_detect_slots\"][\"container\"][id].getMaxVolume()\n    debug(v)\n    return v\nend\n\n-- Get the mass of the empty container (in kg).\n-- id: the id of the container\n-- Return the mass of the container when empty\nfunction containerGetSelfMass(id)\n    id = toStr(id)\n    debug(\"Getting mass of empty container [\"..id..\"]\")\n    local m = unit[\"auto_detect_slots\"][\"container\"][id].getSelfMass()\n    debug(m)\n    return m\nend\n\nfunction containerIterate(func)\n    debug(\"Iterating container table\")\n    tableIterate(unit[\"auto_detect_slots\"][\"container\"], func)\nend\n\n--\n-- DOOR UNIT\n--\n\n-- Get the number of doors.\nfunction doorCount()\n    debug(\"Getting the count of doors\")\n    return tableCount(unit[\"auto_detect_slots\"][\"door\"])\nend\n\n-- Close a door.\n-- id: door id (nil=all)\nfunction doorClose(id)\n    function op(id, unit, data)\n        debug(\"Closing door [\"..id..\"]\")\n        unit.deactivate()\n    end\n    use(unit[\"auto_detect_slots\"][\"door\"], id, op, nil)\nend\n\n-- Open a door.\n-- id: door id (nil=all)\nfunction doorOpen(id)\n    function op(id, unit, data)\n        debug(\"Opening door [\"..id..\"]\")\n        unit.activate()\n    end\n    use(unit[\"auto_detect_slots\"][\"door\"], id, op, nil)\nend\n\n-- Get the state of a door.\n-- id: door id\n-- return the door state (1=open, 0=closed)\nfunction doorGetState(id)\n    id = toStr(id)\n    debug(\"Getting state for door [\"..id..\"]\")\n    local st = unit[\"auto_detect_slots\"][\"door\"][id].getState()\n    return st\nend\n\n-- Toggle the state of a door.\n-- id: door id (nil=all)\nfunction doorToggle(id)\n    function op(id, unit, data)\n        debug(\"Toggling state for door [\"..id..\"]\")\n        unit.toggle()\n    end\n    use(unit[\"auto_detect_slots\"][\"door\"], id, op, nil)\nend\n\nfunction doorIterate(func)\n    debug(\"Iterating door table\")\n    tableIterate(unit[\"auto_detect_slots\"][\"door\"], func)\nend\n\n--\n-- LIGHT UNIT\n--\n\n-- Get the number of lights.\nfunction lightCount()\n    debug(\"Getting count of lights\")\n    return tableCount(unit[\"auto_detect_slots\"][\"light\"])\nend\n\n-- Activate a light.\n-- id: light id (nil=all)\nfunction lightActivate(id)\n    function op(id, unit, data)\n        debug(\"Activating light [\"..id..\"]\")\n        unit.activate()\n    end\n    use(unit[\"auto_detect_slots\"][\"light\"], id, op, nil)\nend\n\n-- Deactivate a light.\n-- id: light id (nil=all)\nfunction lightDeactivate(id)\n    function op(id, unit, data)\n        debug(\"Deactivating light [\"..id..\"]\")\n        unit.deactivate()\n    end\n    use(unit[\"auto_detect_slots\"][\"light\"], id, op, nil)\nend\n\n-- Get the perceived brightness of a light.\n-- id: light id\n-- returns the brightness of the light\nfunction lightGetBrightness(id)\n    id = toStr(id)\n    debug(\"Getting brightness for light [\"..id..\"]\")\n    local rgb = lightGetRGBColor(id)\n    local br = math.sqrt((0.299 * rgb[1] * rgb[1]) + (0.587 * rgb[2] * rgb[2]) + (0.114 * rgb[3] * rgb[3]))\n    return br\nend\n\n-- Get the RGB color of a light.\n-- id: light id\n-- returns the RGB color of the light\nfunction lightGetRGBColor(id)\n    id = toStr(id)\n    debug(\"Getting RGB for light [\"..id..\"]\")\n    local rgb = unit[\"auto_detect_slots\"][\"light\"][id].getRGBColor()\n    return rgb\nend\n\n-- Get the state of a light.\n-- id: light id\n-- returns the state of the light (1=on, 0=off)\nfunction lightGetState(id)\n    id = toStr(id)\n    debug(\"Getting state for light [\"..id..\"]\")\n    local st = unit[\"auto_detect_slots\"][\"light\"][id].getState()\n    return st\nend\n\n-- Set the RGB color of a light.\n-- id: light id (nil=all)\n-- rgb: the RGB color to set\nfunction lightSetRGBColor(id, rgb)\n    function op(id, unit, rgb)\n        debug(\"Setting RGB for light [\"..id..\"]\")\n        unit.setRGBColor(rgb[1],rgb[2],rgb[3])\n    end\n    use(unit[\"auto_detect_slots\"][\"light\"], id, op, rgb)\nend\n\n-- Toggle the state of a light.\n-- id: light id (nil=all)\nfunction lightToggle(id)\n    function op(id, unit, data)\n        debug(\"Toggling state for light [\"..id..\"]\")\n        unit.toggle()\n    end\n    use(unit[\"auto_detect_slots\"][\"light\"], id, op, nil)\nend\n\nfunction lightIterate(func)\n    debug(\"Iterating light table\")\n    tableIterate(unit[\"auto_detect_slots\"][\"light\"], func)\nend\n\n--\n-- SCREEN UNIT\n--\n\n-- Get the number of screens.\nfunction screenCount()\n    debug(\"Getting screen count\")\n    return tableCount(unit[\"auto_detect_slots\"][\"screen\"])\nend\n\n-- Activate a screen.\n-- id: screen index (nil=all)\nfunction screenActivate(id)\n    function op(id, unit, data)\n        debug(\"Activating screen [\"..id..\"]\")\n        unit.activate()\n    end\n    use(unit[\"auto_detect_slots\"][\"screen\"], id, op, nil)\nend\n\n-- Deactivate a screen.\n-- id: screen id (nil=all)\nfunction screenDeactivate(id)\n    function op(id, unit, data)\n        debug(\"Deactivating screen [\"..id..\"]\")\n        unit.deactivate()\n    end\n    use(unit[\"auto_detect_slots\"][\"screen\"], id, op, nil)\nend\n\n-- Clear a screen.\n-- id: screen id (nil=all)\nfunction screenClear(id)\n    function op(id, unit, data)\n        debug(\"Clearing screen [\"..id..\"]\")\n        unit.clear()\n    end\n    use(unit[\"auto_detect_slots\"][\"screen\"], id, op, nil)\nend\n\n-- Set a screen with HTML.\n-- id: screen id (nil=all)\n-- html: the HTML to set\nfunction screenSetHTML(id, html)\n    function op(id, unit, html)\n        debug(\"Setting HTML on screen [\"..id..\"]\")\n        unit.setHTML(html)\n    end\n    use(unit[\"auto_detect_slots\"][\"screen\"], id, op, html)\nend\n\n-- Set a screen with SVG.\n-- id: screen id (nil=all)\n-- svg: the SVG to set\nfunction screenSetSVG(id, svg)\n    function op(id, unit, svg)\n        debug(\"Setting SVG on screen [\"..id..\"]\")\n        unit.setSVG(svg)\n    end\n    use(unit[\"auto_detect_slots\"][\"screen\"], id, op, svg)\nend\n\n-- Set a screen with text.\n-- id: screen id (nil=all)\n-- text: the text to set\nfunction screenSetText(id, text)\n    function op(id, unit, text)\n        debug(\"Setting TEXT on screen [\"..id..\"]\")\n        unit.setCenteredText(text)\n    end\n    use(unit[\"auto_detect_slots\"][\"screen\"], id, op, text)\nend\n\nfunction screenIterate(func)\n    debug(\"Iterating screen table\")\n    tableIterate(unit[\"auto_detect_slots\"][\"screen\"], func)\nend\n\n--\n-- SIGN UNIT\n--\n\n-- Get the number of signs.\nfunction signCount()\n    debug(\"Getting count of signs.\")\n    return tableCount(unit[\"auto_detect_slots\"][\"sign\"])\nend\n\n-- Activate a sign.\n-- id: sign id (nil=all)\nfunction signActivate(id)\n    function op(id, unit, data)\n        debug(\"Activating sign [\"..id..\"]\")\n        unit.activate()\n    end\n    use(unit[\"auto_detect_slots\"][\"sign\"], id, op, nil)\nend\n\n-- Deactivate a sign.\n-- id: sign id (nil=all)\nfunction signDeactivate(id)\n    function op(id, unit, data)\n        debug(\"Deactivating sign [\"..id..\"]\")\n        unit.deactivate()\n    end\n    use(unit[\"auto_detect_slots\"][\"sign\"], id, op, nil)\nend\n\n-- Clear a sign.\n-- id: sign id (nil=all)\nfunction signClear(id)\n    function op(id, unit, data)\n        debug(\"Clearing sign [\"..id..\"]\")\n        unit.clear()\n    end\n    use(unit[\"auto_detect_slots\"][\"sign\"], id, op, nil)\nend\n\n-- Set a sign with HTML.\n-- id: sign id (nil=all)\n-- html: the HTML to set\nfunction signSetHTML(id, html)\n    function op(id, unit, html)\n        debug(\"Setting HTML on sign [\"..id..\"]\")\n        unit.setHTML(html)\n    end\n    use(unit[\"auto_detect_slots\"][\"sign\"], id, op, html)\nend\n\n-- Set a sign with SVG.\n-- id: sign id (nil=all)\n-- svg: the SVG to set\nfunction signSetSVG(id, svg)\n    function op(id, unit, svg)\n        debug(\"Setting SVG on sign [\"..id..\"]\")\n        unit.setSVG(svg)\n    end\n    use(unit[\"auto_detect_slots\"][\"sign\"], id, op, svg)\nend\n\n-- Set a sign with text.\n-- id: sign id (nil=all)\n-- text: the text to set\nfunction signSetText(id, text)\n    function op(id, unit, text)\n        debug(\"Setting TEXT on sign [\"..id..\"]\")\n        unit.setCenteredText(text)\n    end\n    use(unit[\"auto_detect_slots\"][\"sign\"], id, op, text)\nend\n\nfunction signIterate(func)\n    debug(\"Iterating sign table\")\n    tableIterate(unit[\"auto_detect_slots\"][\"sign\"], func)\nend\n","filter":{"args":[],"signature":"start()","slotKey":"-2"},"key":"2"}],"methods":[],"events":[]}
